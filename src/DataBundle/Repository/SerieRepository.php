<?php

namespace DataBundle\Repository;

/**
 * SerieRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SerieRepository extends \Doctrine\ORM\EntityRepository
{
	public function findSuggestion($user_id)
	{
		$query = 	'
					SELECT s
					FROM DataBundle:Serie s JOIN s.collecteds c JOIN c.user u where u.id <> :user_id
					';
		// $query = 	'
					// SELECT s
					// FROM DataBundle:Collected c JOIN c.user u JOIN c.serie s WHERE u.id <> :user_id
					// ';
		$qb = $this->getEntityManager()->createQuery($query);
		$qb->setParameter('user_id', $user_id);
		return $qb
			->getResult();
	}
	
	public function findToDelete()
	{
		$query = 	'
					SELECT s
					FROM DataBundle:Serie s WHERE SIZE(s.collecteds) = 0
					';
		$qb = $this->getEntityManager()->createQuery($query);
		
		return $qb
			->getResult();
	}
	
	public function findAllPagination($page, $nb_element)
	{
		$query = 	'
					SELECT s
					FROM DataBundle:Serie s
					';
		$qb = $this->getEntityManager()->createQuery($query)->setMaxResults($nb_element)->setFirstResult($nb_element*($page-1));
		
		return $qb
			->getResult();
	}
	public function findByYearsCategoriesRatingStatus($year_min, $year_max, $tab_category, $rating_min, $rating_max, $status)
	{
		
		/*$qb = $this->createQueryBuilder('s');
		$qb	->add('where', $qb->expr()->andX(
				$qb->expr()->between('s.rating',':min_rating', ':max_rating'),
				$qb->expr()->like('s.status', ':status'),
				$qb->expr()->in('s.genre', ':tab_category') ))
			->orderBy('s.rating', 'DESC');
		$qb->setParameters(array('tab_category' => $tab_category, 'min_rating' => $rating_min, 'max_rating' => $rating_max, 'status' => $status));
		  */

		$query = 	'
					SELECT s
					FROM DataBundle:Serie s
					WHERE s.firstAired BETWEEN :year_min AND :year_max
					AND s.rating BETWEEN :min_rating AND :max_rating
					AND s.status LIKE :status AND (
					';
        if($tab_category) {
            for($i = 0; $i < count($tab_category); $i++)
            {
                $query .= 's.genre LIKE :category'.$i.' ';
                if($i < count($tab_category)-1)
                    $query .= 'OR ';
            }
        }
        $query .= ') ';
		
		
		$qb = $this->getEntityManager()->createQuery($query);
		
		$qb->setParameter('year_min', new \Datetime($year_min.'-01-01'));
		$qb->setParameter('year_max', new \Datetime($year_max.'-12-31'));
		$qb->setParameter('min_rating', $rating_min);
		$qb->setParameter('max_rating', $rating_max);
		$qb->setParameter('status', '%'.$status.'%');
        if($tab_category) {
            for($i = 0; $i < count($tab_category); $i++)
            {
                $qb->setParameter('category'.$i, '%'.$tab_category[$i].'%') ;
            }
        }
		
		return $qb
			->getResult();
	}
	
	public function findByYearsCategoriesRatingStatusPagination($year_min, $year_max, $tab_category, $rating_min, $rating_max, $status, $page, $nb_element)
	{
		
		/*$qb = $this->createQueryBuilder('s');
		$qb	->add('where', $qb->expr()->andX(
				$qb->expr()->between('s.rating',':min_rating', ':max_rating'),
				$qb->expr()->like('s.status', ':status'),
				$qb->expr()->in('s.genre', ':tab_category') ))
			->orderBy('s.rating', 'DESC');
		$qb->setParameters(array('tab_category' => $tab_category, 'min_rating' => $rating_min, 'max_rating' => $rating_max, 'status' => $status));
		  */

		$query = 	'
					SELECT s
					FROM DataBundle:Serie s
					WHERE s.firstAired BETWEEN :year_min AND :year_max
					AND s.rating BETWEEN :min_rating AND :max_rating
					AND s.status LIKE :status AND (
					';
        if($tab_category) {
            for($i = 0; $i < count($tab_category); $i++)
            {
                $query .= 's.genre LIKE :category'.$i.' ';
                if($i < count($tab_category)-1)
                    $query .= 'OR ';
            }
        }
        
        $query .= ') ';
		$qb = $this->getEntityManager()->createQuery($query)->setMaxResults($nb_element)->setFirstResult($nb_element*($page-1));
		
		$qb->setParameter('year_min', new \Datetime($year_min.'-01-01'));
		$qb->setParameter('year_max', new \Datetime($year_max.'-12-31'));
		$qb->setParameter('min_rating', $rating_min);
		$qb->setParameter('max_rating', $rating_max);
		$qb->setParameter('status', '%'.$status.'%');
        if($tab_category) {
            for($i = 0; $i < count($tab_category); $i++)
            {
                $qb->setParameter('category'.$i, '%'.$tab_category[$i].'%') ;
            }
        }
		return $qb
			->getResult();
	}
}
